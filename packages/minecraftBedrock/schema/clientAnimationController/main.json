{
	"$schema": "http://json-schema.org/draft-07/schema",
	"$id": "bridge.clientAnimationController",
	"title": "Client Animation Controller",
	"required": ["format_version"],
	"properties": {
		"format_version": { "enum": ["1.10.0"] },
		"animation_controllers": {
			"patternProperties": {
				"^controller.animation\\..+$": {
					"properties": {
						"initial_state": { "$ref": "./dynamic/currentContext/stateEnum.json" },
						"states": {
							"patternProperties": {
								".+": {
									"properties": {
										"animations": {
											"type": "array",
											"items": {
												"anyOf": [
													{
														"$ref": "../clientEntity/dynamic/animationReferenceEnum.json"
													},
													{
														"type": "object",
														"propertyNames": {
															"$ref": "../clientEntity/dynamic/animationReferenceEnum.json"
														},
														"patternProperties": {
															".+": {
																"$ref": "../molang/embedded.json"
															}
														}
													}
												]
											}
										},
										"transitions": {
											"type": "array",
											"items": {
												"type": "object",
												"propertyNames": {
													"$ref": "../clientAnimationController/dynamic/currentContext/stateEnum.json"
												},
												"patternProperties": {
													".+": {
														"$ref": "../molang/embedded.json"
													}
												}
											}
										},
										"on_entry": {
											"description": "Molang scripts to execute when entering this state.",
											"type": "array",
											"items": {
												"$ref": "../molang/embedded.json"
											}
										},
										"on_exit": {
											"description": "Molang scripts to execute when exiting this state.",
											"type": "array",
											"items": {
												"$ref": "../molang/embedded.json"
											}
										},
										"blend_transition": {
											"description": "Specifies the cross-fade time in seconds when transitioning to another state.",
											"anyOf": [
												{
													"type": "boolean"
												},
												{
													"type": "number"
												}
											]
										},
										"blend_via_shortest_path": {
											"description": "When blending a transition to another state, animate each euler axis through the shortest rotation, instead of by value.",
											"type": "boolean"
										},
										"parameters": {
											"type": "array",
											"items": {
												"$ref": "../molang/embedded.json"
											}
										},
										"variables": {
											"patternProperties": {
												".+": {
													"type": "object",
													"additionalProperties": false,
													"properties": {
														"input": {
															"$ref": "../molang/embedded.json"
														},
														"remap_curve": {
															"type": "object",
															"patternProperties": {
																"^[0-9]*$": {
																	"type": "number"
																}
															}
														}
													}
												}
											}
										},
										"particle_effects": {
											"type": "array",
											"items": {
												"type": "object",
												"additionalProperties": false,
												"properties": {
													"effect": {
														"description": "The name of a particle effect that should be played.",
														"$ref": "../clientEntity/dynamic/particleReferenceEnum.json"
													},
													"locator": {
														"description": "The name of a locator on the actor where the effect should be located.",
														"$ref": "../geometry/dynamic/locatorEnum.json"
													},
													"pre_effect_script": {
														"description": "A Molang script that will be run when the particle emitter is initialized.",
														"$ref": "../molang/embedded.json"
													},
													"bind_to_actor": {
														"description": "Set to false to have the effect spawned in the world without being bound to an actor (by default an effect is bound to the actor).",
														"type": "boolean"
													}
												}
											}
										},
										"sound_effects": {
											"type": "array",
											"items": {
												"type": "object",
												"patternProperties": {
													"effect": {
														"description": "Valid sound effect names should be listed in the entity's resource definition json file.",
														"$ref": "../clientEntity/dynamic/soundEffectReferenceEnum.json"
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
}
